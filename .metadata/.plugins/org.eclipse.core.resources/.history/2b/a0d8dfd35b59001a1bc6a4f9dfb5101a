package com.assimilate.matrimony.restcontroller;

import static com.assimilate.matrimony.common.MatrimonyConstants.API;
import static com.assimilate.matrimony.common.MatrimonyConstants.DELETE_PROFILE_DETAILS;
import static com.assimilate.matrimony.common.MatrimonyConstants.DELETE_PROFILE_DETAILS_By_USER_ID;
import static com.assimilate.matrimony.common.MatrimonyConstants.GET_USER_BY_ID;
import static com.assimilate.matrimony.common.MatrimonyConstants.POST_PROFILE_DETAILS;
import static com.assimilate.matrimony.common.MatrimonyConstants.PROFILE_DETAILS_LIST;
import static com.assimilate.matrimony.common.MatrimonyConstants.UPDATE_PROFILE_DETAILS;
import static org.springframework.http.HttpStatus.FORBIDDEN;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.assimilate.matrimony.common.RecordNotFoundException;
import com.assimilate.matrimony.domain.ProfileDetailsEntity;
import com.assimilate.matrimony.service.ProfileDetailsService;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping(API)
public class ProfileDetailsRestController {

	@Autowired
	private ProfileDetailsService profileDetailsService;

	@PutMapping(UPDATE_PROFILE_DETAILS)
	public ResponseEntity<ProfileDetailsEntity> updateProfileDetails(@RequestBody ProfileDetailsEntity profileDetails,
			@PathVariable("user_id") int user_id, @PathVariable("profile_details_id") int profile_details_id)
			throws RecordNotFoundException {
		System.out.println("for Updating profile_details" + profileDetails);
		ProfileDetailsEntity result = profileDetailsService.updateProfileDetails(profileDetails, user_id,
				profile_details_id);

		return new ResponseEntity<ProfileDetailsEntity>(result, new HttpHeaders(), HttpStatus.OK);

	}

	@PostMapping(POST_PROFILE_DETAILS)

	public ResponseEntity<ProfileDetailsEntity> createProfileDetails(@RequestBody ProfileDetailsEntity profileDetails)
			throws RecordNotFoundException {

		ProfileDetailsEntity entity = profileDetailsService.createProfileDetails(profileDetails);
		return new ResponseEntity<ProfileDetailsEntity>(entity, new HttpHeaders(), HttpStatus.OK);

	}

	@DeleteMapping(DELETE_PROFILE_DETAILS)
	public String deleteProfileDetails(@PathVariable("profile_details_id") int profile_details_id) {

		System.out.println("Deleting Profile_details");
		profileDetailsService.deleteProfileDetails(profile_details_id);

		return "Profile Delete Successfully";
	}

	@GetMapping(PROFILE_DETAILS_LIST)
	public ResponseEntity<ProfileDetailsEntity> getAll() {

		List<ProfileDetailsEntity> profile = profileDetailsService.getAll();
		return new ResponseEntity<ProfileDetailsEntity>(new HttpHeaders(),HttpStatus.OK);

	}

	@DeleteMapping(DELETE_PROFILE_DETAILS_By_USER_ID)

	public HttpStatus deleteprofileDetails(@PathVariable int user_id) throws RecordNotFoundException {

		profileDetailsService.deleteprofileDetails(user_id);

		return FORBIDDEN;

	}
//		@PutMapping("/api/update/{user_id}")
//		public String UpdateByUserId(@PathVariable("user_id") int user_id) {
//			 profileDetailsService.UpdateByUserId(user_id);
//			 return "profile updated successfully";
//			
//		}
//		

	@GetMapping(GET_USER_BY_ID)
	public ResponseEntity<ProfileDetailsEntity> getUserById(@PathVariable("user_id") int user_id)
			throws RecordNotFoundException {

		ProfileDetailsEntity entity = profileDetailsService.getUserById(user_id);

		return new ResponseEntity<ProfileDetailsEntity>(entity, new HttpHeaders(), HttpStatus.OK);

	}

}
